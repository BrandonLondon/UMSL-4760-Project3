Devence: Bhatai states that we did not have to implement a shared clock. We would use time or formated time for everything.

# DESCRIPTION:
The goal of this homework is to become familiar with semaphores in the Unix operating system. You are working on the
same problem as the last assignment but using semaphores to solve it.

The main program will read the list of palindromes from a file (one
string per line) into shared memory and fork off processes. Each child will test the string at the index assigned to it and
write the string into appropriate file, named palin.out and nopalin.out. In addition, the processes will write into a log
file (described below). You will have to use semaphores to protect the critical resources – the two files.
Make sure you never have more than 20 processes in the system at any time, even if the program is invoked with n > 20.
Add the pid of the child to the file as comment in the log file. The preferred output format for log file is:
PID Index String
where Index is the logical number for the child, assigned internally by your code, and varies between 0 and n − 1.
The child process will be execed by the command
palin xx
where xx is the index number of the string to be tested in shared memory. You can supply other parameters in exec as
needed, such as the logical number of the child.
If a process starts to execute code to enter the critical section, it must print a message to that effect on stderr. It will be
a good idea to include the time when that happens. Also, indicate the time on stderr when the process actually enters
and exits the critical section. Within the critical section, wait for [0-2] seconds before you write into the file.
The code for each child process should use the following template:

determine if the string is a palindrome;
execute code to enter critical section;
sleep for random amount of time (between 0 and 2 seconds);
/* Critical section */
execute code to exit from critical section;

Note that all of these options should have some sensible default values, which should be described if -h is specified. For
example, if the project is called with: master -s 2 palindromes then master will fork/exec 2 child processes but then
not create any more until one of them terminated. Once a child terminates, it’ll create another, continuing this until it has
processed all the strings in the data file. At that point it will wait until all of them have terminated. When done, it would
output appropriate information to the logfile, called output.log.
Termination Criteria: There are several termination criteria. First, if all the children have finished, the parent process
should deallocate shared memory and terminate.
In addition, I expect your program to terminate after the specified amount of time (-t option) of real clock. This can be
done using a timeout signal, at which point it should kill all currently running child processes and terminate. It should
also catch the ctrl-c signal, free up shared memory and then terminate all children. No matter how it terminates, master
should also output the value of the system clock to the output file.

```
-h Describe how the project should be run and then, terminate.
-n x Indicate the maximum total of child processes master will ever create. (Default 4)
-s x Indicate the number of children allowed to exist in the system at the same time. (Default 2)
-t time The time in seconds after which the process will terminate, even if it has not finished. (Default 100)
infile Input file containing strings to be tested.
```
Once you have parsed the command line arguments and validated them, then you should attempt to open the input file. It will start with a line children will then need to be spawn (in master.cpp) and determine if its a palindrome in (palin.cpp). An example of the test file is below:

a
aba
abbbbb
babaabba
bob
yes
I
Hate
C

# HOW TO RUN:
master should take in several command line options as follows:
master -h
master [-n x] [-s x] [-t time] infile
-h Describe how the project should be run and then, terminate.
-n x Indicate the maximum total of child processes master will ever create. (Default 4)
-s x Indicate the number of children allowed to exist in the system at the same time. (Default 2)
-t time The time in seconds after which the process will terminate, even if it has not finished. (Default 100)
[infile] Input file containing strings to be tested.
```
# VERSION CONTROL:
link: "https://github.com/BrandonLondon/UMSL-4760-Project3"

==============================================================================Commits on Oct 16, 2020=============================================================================
-Finished ReadMe Added last minute comments to code and Final Cleanup

@BrandonLondon
BrandonLondon committed 13 minutes ago
 
====================================================================================Commits on Oct 15, 2020======================================================================
Finished Rough copy of Palin.cpp and main.cpp

@BrandonLondon
BrandonLondon committed 17 hours ago
 
Adding Termination

@BrandonLondon
BrandonLondon committed 18 hours ago
 
Fixed Bug, program would stop randomly

@BrandonLondon
BrandonLondon committed 22 hours ago
 
Bug***** Program wont stop

@BrandonLondon
BrandonLondon committed yesterday
 
=====================================================================================Commits on Oct 14, 2020=====================================================================
Copied Over project one.

@BrandonLondon
BrandonLondon committed 2 days ago
